-- ================================================================
-- COMPLETE SOCIAL STATS SETUP - All-in-One Solution
-- This script handles everything from scratch
-- ================================================================

-- Step 1: Drop existing table if it exists (clean slate)
DROP TABLE IF EXISTS public.social_stats CASCADE;

-- Step 2: Create the social_stats table with correct schema
CREATE TABLE public.social_stats (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    platform VARCHAR(50) NOT NULL UNIQUE,
    platform_name VARCHAR(100) NOT NULL,
    follower_count INTEGER NOT NULL DEFAULT 0,
    display_count VARCHAR(20) NOT NULL, -- e.g., "2.1K", "5.3K" for formatted display
    platform_color VARCHAR(100), -- Made nullable - some platforms only use gradients
    platform_gradient VARCHAR(200), -- For gradient backgrounds like Instagram
    text_color VARCHAR(50) NOT NULL DEFAULT 'text-white',
    platform_url VARCHAR(255), -- Link to your profile
    is_active BOOLEAN NOT NULL DEFAULT true,
    display_order INTEGER NOT NULL DEFAULT 0,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT social_stats_pkey PRIMARY KEY (id)
);

-- Step 3: Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Step 4: Create trigger for auto-updating updated_at
CREATE TRIGGER update_social_stats_updated_at 
    BEFORE UPDATE ON public.social_stats 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Step 5: Insert initial data
INSERT INTO public.social_stats (
    platform, 
    platform_name, 
    follower_count, 
    display_count, 
    platform_color, 
    platform_gradient, 
    text_color, 
    platform_url, 
    display_order
) VALUES
('bluesky', 'Bluesky', 2100, '2.1K', 'bg-[rgb(0,133,255)]', NULL, 'text-blue-200', 'https://bsky.app/profile/seansneed.bsky.social', 1),
('instagram', 'Instagram', 5300, '5.3K', NULL, 'bg-gradient-to-r from-orange-500 via-purple-500 to-pink-500', 'text-orange-200', 'https://instagram.com/theseansneed', 2),
('linkedin', 'LinkedIn', 3800, '3.8K', 'bg-[rgb(10,102,194)]', NULL, 'text-blue-200', 'https://linkedin.com/in/seansneed', 3),
('total', 'Total Reach', 12000, '12K', 'bg-neutral-800', NULL, 'text-neutral-400', NULL, 4);

-- Step 6: Enable Row Level Security (RLS)
ALTER TABLE public.social_stats ENABLE ROW LEVEL SECURITY;

-- Step 7: Create RLS policies
-- Allow public read access (for displaying stats on website)
CREATE POLICY "Allow public read access" ON public.social_stats
    FOR SELECT USING (true);

-- Allow authenticated users to insert/update (for admin interface)
CREATE POLICY "Allow authenticated insert" ON public.social_stats
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated update" ON public.social_stats
    FOR UPDATE USING (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated delete" ON public.social_stats
    FOR DELETE USING (auth.role() = 'authenticated');

-- Step 8: Grant necessary permissions
GRANT SELECT ON public.social_stats TO anon;
GRANT ALL ON public.social_stats TO authenticated;
GRANT USAGE, SELECT ON SEQUENCE social_stats_id_seq TO authenticated;

-- Step 9: Verify everything was created correctly
SELECT 
    'Table created successfully' as status,
    COUNT(*) as record_count 
FROM public.social_stats;

-- Step 10: Show the data structure
SELECT 
    platform,
    platform_name,
    display_count,
    CASE 
        WHEN platform_color IS NOT NULL THEN platform_color
        WHEN platform_gradient IS NOT NULL THEN platform_gradient
        ELSE 'No styling defined'
    END as styling,
    is_active,
    display_order
FROM public.social_stats 
ORDER BY display_order;

-- ================================================================
-- SETUP COMPLETE! 
-- Your social stats are now ready to be dynamically managed
-- ================================================================ 