-- Create social_stats table for managing dynamic social media statistics
-- This allows you to update your follower counts without touching the code

CREATE TABLE public.social_stats (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    platform VARCHAR(50) NOT NULL UNIQUE,
    platform_name VARCHAR(100) NOT NULL,
    follower_count INTEGER NOT NULL DEFAULT 0,
    display_count VARCHAR(20) NOT NULL, -- e.g., "2.1K", "5.3K" for formatted display
    platform_color VARCHAR(100) NOT NULL DEFAULT 'bg-neutral-800',
    platform_gradient VARCHAR(200), -- For gradient backgrounds like Instagram
    text_color VARCHAR(50) NOT NULL DEFAULT 'text-white',
    platform_url VARCHAR(255), -- Link to your profile
    is_active BOOLEAN NOT NULL DEFAULT true,
    display_order INTEGER NOT NULL DEFAULT 0,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT social_stats_pkey PRIMARY KEY (id)
);

-- Add RLS (Row Level Security) policies
ALTER TABLE public.social_stats ENABLE ROW LEVEL SECURITY;

-- Allow everyone to read the stats (for public display)
CREATE POLICY "Enable read access for all users" ON public.social_stats
    FOR SELECT USING (true);

-- Only authenticated users can insert/update/delete (for admin)
CREATE POLICY "Enable insert for authenticated users only" ON public.social_stats
    FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable update for authenticated users only" ON public.social_stats
    FOR UPDATE TO authenticated USING (true);

CREATE POLICY "Enable delete for authenticated users only" ON public.social_stats
    FOR DELETE TO authenticated USING (true);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.social_stats
    FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

-- Insert initial data
INSERT INTO public.social_stats (platform, platform_name, follower_count, display_count, platform_color, platform_gradient, text_color, platform_url, display_order) VALUES
('bluesky', 'Bluesky', 2100, '2.1K', 'bg-[rgb(0,133,255)]', NULL, 'text-blue-200', 'https://bsky.app/profile/seansneed.bsky.social', 1),
('instagram', 'Instagram', 5300, '5.3K', NULL, 'bg-gradient-to-r from-orange-500 via-purple-500 to-pink-500', 'text-orange-200', 'https://instagram.com/theseansneed', 2),
('linkedin', 'LinkedIn', 3800, '3.8K', 'bg-[rgb(10,102,194)]', NULL, 'text-blue-200', 'https://linkedin.com/in/seansneed', 3),
('total', 'Total Reach', 12000, '12K', 'bg-neutral-800', NULL, 'text-neutral-400', NULL, 4);

-- Grant permissions for the service role to manage the table
GRANT ALL ON public.social_stats TO service_role;
GRANT ALL ON public.social_stats TO anon;
GRANT ALL ON public.social_stats TO authenticated; 